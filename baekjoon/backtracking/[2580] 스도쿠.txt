import java.util.*;
import java.io.*;

public class Main {
	public static int[][] board = new int[9][9];

	public static boolean check(int row, int col, int value) {
		// 현재 칸의 같은 행에 있는 칸들과 비교
		for(int i = 0; i < 9; i++) {
			if(board[row][i] == value) return false;
		}
		
		// 현재 칸의 같은 열에 있는 칸들과 비교
		for(int i = 0; i < 9; i++) {
			if(board[i][col] == value) return false;
		}
		
		// 현재 칸이 속한 3x3 영역의 칸들과 비교
		int first_row = (row / 3) * 3; // 3x3 영역의 첫 행 인덱스
		int first_col = (col / 3) * 3; // 3x3 영역의 첫 열 인덱스
		
		for(int i = first_row; i < first_row + 3; i++) {
			for(int j = first_col; j < first_col + 3; j++) {
				if(board[i][j] == value) return false;
			}
		}
		
		return true;
	}

	public static void fill(int row, int col) {
		// 해당 행의 끝까지 다 채워진 경우 다음 행 채우기
		if(col == 9) {
			fill(row + 1, 0);
			return;
		}

		// 스도쿠 판의 마지막 칸까지 채워진 경우 출력 후 종료
		if(row == 9) {
			StringBuilder sb = new StringBuilder();
			for(int i = 0; i < 9; i++) {
				for(int j = 0; j < 9; j++) {
					sb.append(board[i][j]).append(" ");
				}
				sb.append("\n");
			}
			System.out.println(sb);
			System.exit(0); // 출력 후 종료
		}

		// 해당 칸의 값이 0이라면 가능한 수 탐색
		if(board[row][col] == 0) {
			for(int i = 1; i <= 9; i++) {
				if(check(row, col, i)) {
					board[row][col] = i;
					fill(row, col + 1);
					board[row][col] = 0;
				}
			}
		} else { // 해당 칸의 값이 0이 아니라면 다음 칸 검사
			fill(row, col + 1);
		}
		
	}

	public static void main(String args[]) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		for(int i = 0; i < 9; i++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			for(int j = 0; j < 9; j++) {
				board[i][j] = Integer.parseInt(st.nextToken());
			}
		}

		fill(0, 0); // 0행 0열의 칸부터 시작
	}
}