import java.util.*;
import java.io.*;

public class Main {
	public static int n;
	public static boolean[] check; // 지워졌으면 true - 소수가 아님
	public static List<Integer> primeList = new ArrayList<>();

	// 자연수 n을 연속된 소수의 합으로 나타낼 수 있는 경우의 수
	public static int getCnt() {
		int start = 0;
		int end = 0;
		// int sum = prime.get(0); // n이 1일 경우 prime은 비어 있어 IndexOutOfBoundsException 발생
		int sum = primeList.size() == 0 ? 0 : primeList.get(0); // 부분합
		int cnt = 0;
		
		while(end < primeList.size()) {
			if(sum == n) {
				cnt++;
				sum -= primeList.get(start++);
			} else if(sum < n) {
				end += 1;

				// end가 prime의 마지막 원소를 가리키고 있을 경우
				// end에 1을 더해 준 후 sum에 더해준다면 IndexOutOfBoundsException 발생
				if(end < primeList.size()) {
					sum += primeList.get(end);
				}
			} else { // sum > n
				sum -= primeList.get(start++);
			}
		}

		return cnt;
	}

	// 소수 구하기
	public static void findPrimeNumbers() {
		for(int i = 2; i <= n; i++) {
			// check[i] = flase이면 소수
			if(!check[i]) {
				primeList.add(i);

				// 소수의 배수들을 지움
				for(int j = i * 2; j <= n; j += i) {
					check[j] = true;
				}
			}
		}
	}

	public static void main(String args[]) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		n = Integer.parseInt(br.readLine());
		check = new boolean[n+1];

		findPrimeNumbers(); // 소수 구하기
		System.out.println(getCnt()); // 경우의 수 구하기
	}
}