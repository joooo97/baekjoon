import java.util.*;
import java.io.*;

public class Main {
	// 드래곤 커브의 꼭짓점이라면 true, 아니면 false
	public static boolean[][] points = new boolean[101][101];
	// 방향 좌표 배열
	// 문제에서 주어진 방향의 x좌표와 y좌표의 증가, 감소 여부대로 방향 배열의 값 저장
	public static int[] dx = {1, 0, -1, 0};
	public static int[] dy = {0, -1, 0, 1};

	public static void dragonCurve(int x, int y, int d, int g) {
		// 1. 방향 구하기
		ArrayList<Integer> dirs = new ArrayList<>(); // 방향 리스트
		dirs.add(d); // 0세대의 시작 방향 저장
		
		// 1세대 ~ g세대까지 반복
		for(int i = 1; i <= g; i++) {
			// 이전 세대의 방향을 역순으로 확인
			for(int j = dirs.size() - 1; j >= 0; j--) {
				// 이전 세대의 각 방향을 반시계 방향으로 90도 회전
				int dir = (dirs.get(j) + 1) % 4;
				dirs.add(dir); // 방향 추가
			}
		}
		
		// 2. 드래곤 커브의 꼭짓점 구하기
		points[x][y] = true; // 시작점
		
		for(int dir : dirs) {
			x += dx[dir];
			y += dy[dir];
			points[x][y] = true;
		}
	}
	
	public static int getSquareCnt() {
		int cnt = 0;
		
		for(int i = 0; i < 100; i++) {
			for(int j = 0; j < 100; j++) {
				if(points[i][j] && points[i][j+1] && points[i+1][j] && points[i+1][j+1])
					cnt += 1;
			}
		}
		
		return cnt;
	}
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int n = Integer.parseInt(br.readLine()); // 드래곤 커브 개수

		while(n-- > 0) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			int x = Integer.parseInt(st.nextToken()); // 시작점 x좌표
			int y = Integer.parseInt(st.nextToken()); // 시작점 y좌표
			int d = Integer.parseInt(st.nextToken()); // 시작 방향
			int g = Integer.parseInt(st.nextToken()); // 세대
			
			dragonCurve(x, y, d, g); // 드래곤 커브 그리기
		}
		
		System.out.println(getSquareCnt()); // 정사각형 개수 구하기
	}
}