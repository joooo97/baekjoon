import java.util.*;
import java.io.*;

// 길: 모든 칸의 높이가 같아야 함
// 경사로: 높이 1, 길이 L
// 경사로를 놓을 수 있는 경우
// - 지도의 범위를 벗어나지 x
// - 경사로를 놓지 않은 곳
// - 연속된 L개의 높이가 같은 낮은 칸
// - 낮은 칸과 높은 칸의 높이 차이는 1

public class Main {
	public static int N, L;
	public static int[][] map;

	// 각 행 또는 열에 대해 검사
	public static boolean check(int[] height) {
		boolean[] visited = new boolean[N]; // 경사로 존재 여부

		// 모든 칸 검사
		for(int i = 0; i < N-1; i++) {
			// 이웃한 칸의 높이가 같다면 넘어감
			if(height[i] == height[i+1]) continue;
			
			// 높이 차이가 1보다 큰 경우 - 경사로를 놓을 수 없어 길이 될 수 없음
			if(Math.abs(height[i] - height[i+1]) > 1) return false;
			
			// 높이 차이가 1인 경우
			// 높이 차이가 1이고 내려가는 경사인 경우
			if(height[i] - height[i+1] == 1) {
				for(int j = i+1; j <= i+L; j++) {
					// 칸의 범위, 경사로 존재 여부, 낮은 칸의 높이와 다른지 확인
					if(j >= N || visited[j] || height[i+1] != height[j])
						return false;
					visited[j] = true; // 경사로 놓기
				}
			}
			// 높이 차이가 1이고 올라가는 경사인 경우
			else if(height[i] - height[i+1] == -1) {
				for(int j = i; j >= i+1-L; j--) {
					if(j < 0 || visited[j] || height[i] != height[j])
						return false;
					visited[j] = true;
				}
			}
		}
		return true;
	}

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		N = Integer.parseInt(st.nextToken());
		L = Integer.parseInt(st.nextToken());
		map = new int[N][N];

		for(int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for(int j = 0; j < N; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}

		int cnt = 0;
		// 길(각 행과 열)에 대해 검사
		for(int i = 0; i < N; i++) {
			// 각 행, 열의 칸들의 높이 
			int[] height = new int[N];

			// 행 검사
			for(int j = 0; j < N; j++)
				height[j] = map[i][j];

			if(check(height)) cnt += 1;

			// 열 검사
			for(int j = 0; j < N; j++)
				height[j] = map[j][i];

			if(check(height)) cnt += 1;
		}
		System.out.println(cnt);
	}
}