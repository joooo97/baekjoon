import java.util.*;
import java.io.*;

public class Main {
	public static int n, m, x, y, d;
	public static int[][] map;
	public static boolean[][] visited;

	// 북,동,남,서
	public static int[] dx = {-1, 0, 1, 0};
	public static int[] dy = {0, 1, 0, -1};

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		n = Integer.parseInt(st.nextToken());
		m = Integer.parseInt(st.nextToken());
		map = new int[n][m]; // 빈 칸:0, 벽:1
		visited = new boolean[n][m];

		st = new StringTokenizer(br.readLine());
		x = Integer.parseInt(st.nextToken()); // 청소기 x 좌표
		y = Integer.parseInt(st.nextToken()); // 청소기 y 좌표
		d = Integer.parseInt(st.nextToken()); // 방향(북,동,남,서)

		for(int i = 0; i < n; i++) {
			st = new StringTokenizer(br.readLine());
			for(int j = 0; j < m; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}

		visited[x][y] = true; // 현재 위치 청소

		int turn = 0; // 회전 횟수

		while(true) {
			// 왼쪽 방향부터 탐색
			// 동-북-남-서-동.. 순서
			d -= 1;
			if(d == -1) d = 3;

			// 다음 이동 좌표
			int nx = x + dx[d];
			int ny = y + dy[d];

			// a. 벽이고 청소하지 않았다면 전진 후 청소, 처음부터 방향 탐색
			if(!visited[nx][ny] && map[nx][ny] == 0) {
				x = nx;
				y = ny;
				visited[x][y] = true;
				turn = 0; // 회전 횟수 초기화
				continue;
			} else { // b. 청소할 공간이 없다면 이어서 방향 탐색
				turn++;
			}

			// 네 방향 모두 청소했거나 벽인 경우
			if(turn == 4) {
				// 후진 후의 좌표
				nx = x - dx[d];
				ny = y - dy[d];

				// 후진 가능한 경우(빈 칸인 경우) 후진 후 처음부터 방향 탐색
				if(map[nx][ny] == 0) {
					x = nx;
					y = ny;
					turn = 0;
				} 
				else break; // 후진할 수 없는 경우 작동 멈추기
			}

		}

		// 청소하는 칸의 개수 출력
		int cnt = 0;
		for(int i = 0; i < n; i++) {
			for(int j = 0; j < m; j++) {
				if(visited[i][j]) cnt += 1;
			}
		}
		System.out.println(cnt);
	}
}