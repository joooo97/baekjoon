import java.io.*;
import java.util.*;

class Node {
	int s; // 화면 이모티콘 수
	int c; // 클립보드 이모티콘 수
	int t; // 걸린 시간
	
	Node(int s, int c, int t) {
		this.s = s;
		this.c = c;
		this.t = t;
	}
}

public class Main {
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int S = Integer.parseInt(br.readLine());
		boolean[][] visited = new boolean[S+1][S+ 1];
				
		Queue<Node> q = new LinkedList<>();
		// 시작 노드 처리
		q.offer(new Node(1, 0, 0)); // 화면: 1개, 클립보드: 0개, 시간: 0초
		visited[1][0] = true;
		
		while(!q.isEmpty()) {
			Node now = q.poll();
			int s = now.s;
			int c = now.c;
			int t = now.t;
			
			// 화면 이모티콘 수가 원하는 수가 되었다면 걸린 시간 출력
			if(s == S) {
				System.out.println(t);
				return;
			}
			
			// 클립보드에 이모티콘 저장
			if(!visited[s][s]) {
				q.offer(new Node(s, s, t+1));
				visited[s][s] = true;
			}
			// 화면에 이모티콘 붙여넣기
			if(s+c <= S && !visited[s+c][c]) {
				q.offer(new Node(s + c, c, t+1));
				visited[s+c][c] = true;
			}
			// 화면 이모티콘 하나 삭제
			if(s-1 >= 0 && !visited[s-1][c]) {
				q.offer(new Node(s-1, c, t+1));
				visited[s-1][c] = true;
			}
		}
	}

}