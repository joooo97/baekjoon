import java.util.*;

class Node {
	int x;
	int y;
	int cnt;
	
	Node(int x, int y, int cnt) {
		this.x = x;
		this.y = y;
		this.cnt = cnt;
	}
}

public class Main {
	public static int[] dx = {-1, 1, 0, 0};
	public static int[] dy = {0, 0, -1, 1};

    public static void main(String[] args) {
    	Scanner sc = new Scanner(System.in);
    	int m = sc.nextInt();
    	int n = sc.nextInt();
    	int[][] map = new int[n][m];
    	boolean[][] visited = new boolean[n][m];
    	
    	for(int i = 0; i < n; i++) {
    		String line = sc.next();
    		for(int j = 0; j < m; j++) {
    			map[i][j] = line.charAt(j) - '0';
    		}
    	}
    	    	
    	// bfs 진행
    	ArrayDeque<Node> deque = new ArrayDeque<>();
    	deque.offer(new Node(0, 0, 0));
    	visited[0][0] = true;
    	
    	while(!deque.isEmpty()) {
    		Node now = deque.poll();
    		
    		if(now.x == n-1 && now.y == m-1) {
    			System.out.println(now.cnt);
    			return;
    		}
    		
    		for(int i = 0; i < 4; i++) {
    			int nx = now.x + dx[i];
    			int ny = now.y + dy[i];
    			
    			if(nx < 0 || nx >= n || ny < 0 || ny >= m) continue;
    			
    			if(!visited[nx][ny]) {
    				if(map[nx][ny] == 0)
    					deque.offerFirst(new Node(nx, ny, now.cnt)); // 가중치가 0: 큐의 앞에 추가
    				else
    					deque.offerLast(new Node(nx, ny, now.cnt+1)); // 가중치가 1: 큐의 뒤에 추가
    				
    				visited[nx][ny] = true;
    			}
    		}
    	}
    }

}