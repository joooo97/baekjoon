import java.util.*;
import java.io.*;

public class Main {
	public static int n, m;
	public static int[][] map;
	public static boolean[][] visited;
	public static int[] dx = {-1, 1, 0, 0};
	public static int[] dy = {0, 0, -1, 1};
	public static int[][] group; // 빈 칸의 그룹 번호 저장 (0부터 시작)
	public static ArrayList<Integer> group_size = new ArrayList<>(); // 그룹별 칸 개수
	
	public static void bfs(int sx, int sy) { 
		int g_idx = group_size.size(); // 현재 그룹 번호
		
		Queue<Node> q = new LinkedList<>();
		// 시작 정점에 대해 처리
		q.offer(new Node(sx, sy));
		visited[sx][sy] = true;
		group[sx][sy] = g_idx; // 그룹 번호 저장
		
		int cnt = 1; // 현재 그룹에 포함된 칸 개수
		while(!q.isEmpty()) {
			Node now = q.poll();
			int x = now.x;
			int y = now.y;
			
			for(int i = 0; i < 4; i++) {
				int nx = x + dx[i];
				int ny = y + dy[i];
				
				if(nx < 0 || nx >= n || ny < 0 || ny >= m) continue;
				
				if(map[nx][ny] == 0 && !visited[nx][ny]) {
					q.offer(new Node(nx, ny));
					visited[nx][ny] = true;
					group[nx][ny] = g_idx;
					cnt += 1;
				}
			}
		} // while
		// 현재 그룹의 칸 개수 기록
		group_size.add(cnt);
	}
	
	// 현재 벽에서 이동 가능한 칸 개수 세기
	public static void count(int x, int y) {
		// 인접한 칸의 그룹 번호들 구하기 (중복은 제거)
		HashSet<Integer> g_numbers = new HashSet<>();
		
		for(int i = 0; i < 4; i++) {
			int nx = x + dx[i];
			int ny = y + dy[i];
			
			if(nx < 0 || nx >= n || ny < 0 || ny >= m) continue;
			
			if(map[nx][ny] == 0)
				g_numbers.add(group[nx][ny]);
		}
		
		int cnt = 1; // 이동 가능 칸 개수 (자기 자신 포함)
		for(int g : g_numbers) {
			cnt += group_size.get(g);
		}
		
		// 이동 가능한 칸 개수 저장
		map[x][y] = cnt;
	}
	
	public static void main(String args[]) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		n = Integer.parseInt(st.nextToken());
		m = Integer.parseInt(st.nextToken());
		map = new int[n][m];
		visited = new boolean[n][m];
		group = new int[n][m];
		
		for(int i = 0; i < n; i++) {
			String line = br.readLine();
			for(int j = 0; j < m; j++) {
				map[i][j] = line.charAt(j) - '0';
			}
		}
		
		// 인접한 빈 칸끼리 그룹 짓기
		// 모든 칸을 확인하며 방문하지 않은 빈 칸에 대해 bfs 또는 dfs 진행
		for(int i = 0; i < n; i++) {
			for(int j = 0; j < m; j++) {
				if(map[i][j] == 0 && !visited[i][j])
					bfs(i, j);
			}
		}
		
		// 벽마다 이동 가능한 칸 개수 구하기
		for(int i = 0; i < n; i++) {
			for(int j = 0; j < m; j++) {
				if(map[i][j] == 1) {
					count(i, j);
				}
			}
		}
		
		// 출력
		StringBuilder sb = new StringBuilder();
		for(int i = 0; i < n; i++) {
			for(int j = 0; j < m; j++) {
				if(map[i][j] == 0) 
					sb.append(0);
				else
					sb.append(map[i][j] % 10);
			}
			sb.append("\n");
		}
		System.out.println(sb);
	}
}

class Node {
	int x;
	int y;
	
	Node(int x, int y) {
		this.x = x;
		this.y = y;
	}
}