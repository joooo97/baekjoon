import java.util.*;
import java.io.*;

// 말의 이동 방법은 k번만 가능
// 시작: 맨 왼쪽 위 ,도착: 맨 오른쪽 아래
// 0: 평지, 1: 장애물
// 도착점까지 이동 불가한 경우 -1 출력
public class Main {
	public static int k, n, m;
	public static int[][] map;
	public static int[][][] d;

	public static int[] dx1 = {-1, 1, 0, 0};
	public static int[] dy1 = {0, 0, -1, 1};
	public static int[] dx2 = {-1, -2, -2, -1, 1, 2, 2, 1};
	public static int[] dy2 = {-2, -1, 1, 2, -2, -1, 1, 2};	

	public static void bfs(int sx, int sy) {
		Queue<Node> q = new LinkedList<>();
		q.offer(new Node(sx, sy, 0));
		d[sx][sy][0] = 0;

		while(!q.isEmpty()) {
			Node now = q.poll();
			int x = now.x;
			int y = now.y;
			int h = now.h; // 말 이동 횟수

			if(x == n-1 && y == m-1) {
				System.out.println(d[x][y][h]);
				System.exit(0);
			}

			// 인접 칸으로 이동 (현재 말 이동 횟수에 상관 없이 이동 가능한 방향)
			for(int i = 0; i < 4; i++) {
				int nx = x + dx1[i];
				int ny = y + dy1[i];

				if(nx < 0 || nx >= n || ny < 0 || ny >= m ) continue;

				// 이미 방문했거나 장애물이 있는 칸인 경우 무시
				if(d[nx][ny][h] != -1 || map[nx][ny] == 1) continue;

				q.offer(new Node(nx, ny, h));
				d[nx][ny][h] = d[x][y][h] + 1;
			}

			if(h < k) {
				
			}
			
			// k번의 말 이동을 한 경우 무시
			if(h >= k) continue;

			// 말의 움직임으로 이동
			for(int i = 0; i < 8; i++) {
				int nx = x + dx2[i];
				int ny = y + dy2[i];

				if(nx < 0 || nx >= n || ny < 0 || ny >= m) continue;

				if(d[nx][ny][h+1] != -1 || map[nx][ny] == 1) continue;

				q.offer(new Node(nx, ny, h + 1));

				d[nx][ny][h+1] = d[x][y][h] + 1;
			}
		}
	}


	public static void main(String args[]) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		k = Integer.parseInt(br.readLine());
		StringTokenizer st = new StringTokenizer(br.readLine());
		m = Integer.parseInt(st.nextToken());
		n = Integer.parseInt(st.nextToken());
		map = new int[n][m];
		d = new int[n][m][k+1];

		for(int i = 0; i < n; i++) {
			st = new StringTokenizer(br.readLine());
			for(int j = 0; j < m; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());

				// 특정 정점에 방문하지 않았음을 -1로 확인하기 위해 -1로 초기화
				Arrays.fill(d[i][j], -1);
			}
		}

		bfs(0, 0);
		System.out.println(-1);
	}
}

class Node {
	int x;
	int y;
	int h; // 말 이동 횟수

	Node(int x, int y, int h) {
		this.x = x;
		this.y = y;
		this.h = h;
	}
}
