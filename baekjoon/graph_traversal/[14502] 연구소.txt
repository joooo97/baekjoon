import java.util.*;
import java.io.*;

public class Main {
	public static int n, m, ans;
	public static int[][] map, temp;
	public static int[] dx = {-1, 1, 0, 0};
	public static int[] dy = {0, 0, -1, 1};
	
	// 안전영역 크기 구하기
	public static int getSafeZoneCnt() {
		int cnt = 0;
		
		for(int i = 0; i < n; i++) {
			for(int j = 0; j < m; j++) {
				if(temp[i][j] == 0) cnt += 1;
			}
		}
		
		return cnt;
 	}
	
	// 바이러스 전파
	public static void spreadVirus(int x, int y) {				
		for(int i = 0; i < 4; i++) {
			int nx = x + dx[i];
			int ny = y + dy[i];
			
			if(nx < 0 || nx >= n || ny < 0 || ny >= m) continue;
			
			if(temp[nx][ny] == 0) {
				temp[nx][ny] = 2;
				spreadVirus(nx, ny);
			}
		}
	}
	
	public static void solve(int cnt) {
		if(cnt == 3) {
			// 벽 세운 후 지도 복사
			for(int i = 0; i < n; i++) {
				for(int j = 0; j < m; j++) {
					temp[i][j] = map[i][j];
				}
			}
			
			// 바이러스 전파
			for(int i = 0; i < n; i++) {
				for(int j = 0; j < m; j++) {
					if(temp[i][j] == 2) {
						spreadVirus(i, j);
					}
				}
			}
			
			// 안전 영역의 최대 크기 구하기
			ans = Math.max(ans, getSafeZoneCnt());
			
			return;
		}
		
		// 벽 세우기
		for(int i = 0; i < n; i++) {
			for(int j = 0; j < m; j++) {
				if(map[i][j] == 0) {
					map[i][j] = 1;
					solve(cnt + 1);
					map[i][j] = 0;
				}
			}
		}
	}
	
	public static void main(String args[]) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());	
		n = Integer.parseInt(st.nextToken());
		m = Integer.parseInt(st.nextToken());
		map = new int[n][m];
		temp = new int[n][m];
		
		for(int i = 0; i < n; i++) {
			st = new StringTokenizer(br.readLine());
			for(int j = 0; j < m; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		
		solve(0);
		
		System.out.println(ans);
		
	}
}