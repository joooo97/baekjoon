import java.util.*;
import java.io.*;

public class Main {
	public static int n, m;
	public static char[][] map;
	public static int[] dx = {-1, 1, 0, 0};
	public static int[] dy = {0, 0, -1, 1};

	public static int[][] bfs(int sx, int sy) {
		// 최단 거리(열어야 하는 문의 최소 개수) 저장 배열
		int[][] d = new int[n+2][m+2];

		// 방문하지 않았음을 확인하기 위해 -1로 초기화
		for(int i = 0; i < n+2; i++) {
			Arrays.fill(d[i], -1);
		}

		// 빈 칸인 경우 +0, 문인 경우 +1로, 가중치가 0 또는 1이므로 덱 이용
		ArrayDeque<Node> deque = new ArrayDeque<Node>();
		deque.offer(new Node(sx, sy));
		d[sx][sy] = 0;

		while(!deque.isEmpty()) {
			Node now = deque.poll();
			int x = now.x;
			int y = now.y;

			for(int i = 0; i < 4; i++) {
				int nx = x + dx[i];
				int ny = y + dy[i];

				if(nx < 0 || nx >= n+2 || ny < 0 || ny >= m+2) continue;

				// 벽이거나 이미 방문한 경우 무시
				if(map[nx][ny] == '*' || d[nx][ny] != -1) continue;

				if(map[nx][ny] == '#') { // 문인 경우
					deque.addLast(new Node(nx, ny)); // 가중치가 1로 더 크므로 큐의 뒤쪽에 추가
					d[nx][ny] = d[x][y] + 1; // 문 연 횟수 1 증가
				} else {
					deque.addFirst(new Node(nx, ny)); // 가중치가 0이므로 큐의 앞쪽에 추가
					d[nx][ny] = d[x][y]; // 문 연 횟수 그대로
				}
			}
		}
		return d;
	}

	public static void main(String args[]) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = null;
		int t = Integer.parseInt(br.readLine());

		while(t-- > 0) {
			st = new StringTokenizer(br.readLine());
			n = Integer.parseInt(st.nextToken());
			m = Integer.parseInt(st.nextToken());
			map = new char[n+2][m+2]; // 지도의 크기를 확장

			// 확장한 부분을 빈 칸으로 채움
			for(int i = 0; i < n+2; i++) {
				Arrays.fill(map[i], '.');
			}

			// 죄수의 위치를 저장할 변수
			int px1, py1, px2, py2;
			px1 = py1 = px2 = py2 = -1;

			// 지도 정보 입력 받기
			for(int i = 1; i <= n; i++) {
				String line = br.readLine();
				for(int j = 1; j <= m; j++) {
					map[i][j] = line.charAt(j-1);

					// 죄수 위치 저장
					if(map[i][j] == '$') {
						if(px1 == -1) {
							px1 = i;
							py1 = j;
						} else {
							px2 = i;
							py2 = j;
						}
					}
				}
			}

			int[][] d1 = bfs(px1, py1); // 죄수1이 열어야 하는 문의 최소 개수
			int[][] d2 = bfs(px2, py2); // 죄수2가 열어야 하는 문의 최소 개수
			int[][] d3 = bfs(0, 0); // 상근이가 열어야 하는 문의 최소 개수

			// 두 죄수를 탈옥시키기 위해 열어야 하는 문의 최소 개수
			int ans = Integer.MAX_VALUE;

			for(int i = 0; i < n+2; i++) {
				for(int j = 0; j < m+2; j++) {
					// 벽인 경우 무시
					if(map[i][j] == '*') continue;

					int tmp = d1[i][j] + d2[i][j] + d3[i][j];
					if(map[i][j] == '#') tmp -= 2; // 문인 경우, 문은 한 명만 열면 되므로 2를 빼줌
					if(ans > tmp) ans = tmp;
				}
			}
			System.out.println(ans);
		} // while
	}
}

class Node {
	int x;
	int y;

	Node(int x, int y) {
		this.x = x;
		this.y = y;
	}
}