import java.util.*;
import java.io.*;

// 0: 이동 가능, 1: 벽
// 시작 칸과 끝 칸도 포함하여 최단경로 계산
// 벽은 한 번 부술 수 있음
public class Main {
	public static int n, m;
	public static int[][] map;
	
	public static boolean[][][] visited;
	// 정점에 도달했을 때 벽을 부순 적이 있는 경우와 부순 적이 없는 경우가 있음
	// (x, y)가 빈 칸인 경우
	// - visited[x][y][0]: 벽을 0번 부순 상태에서 빈칸에 도달
	// - visited[x][y][1]: 벽을 1번 부순 상태에서 빈칸에 도달
	// (x, y)가 벽인 경우
	// - visited[x][y][1]: 벽을 부수고(x, y)에 도달
	// - visited[x][y][0]은 true가 될 수 없음 (벽을 부수지 않고는 벽에 도달할 수 없기 때문)
	
	public static int[] dx = {-1, 1, 0, 0};
	public static int[] dy = {0, 0, -1, 1};
	
	public static void bfs() {
		Queue<Node> q = new LinkedList<>();
		q.offer(new Node(0, 0, 0, 1)); // 시작 정점
		visited[0][0][0] = true; // 벽을 부수지 않고(0, 0)에 도달
		
		while(!q.isEmpty()) {
			Node now = q.poll();
			int x = now.x;
			int y = now.y;
			int cnt = now.cnt;
			int d = now.d;
			
			// 도착 지점에 도착했다면 종료
			if(x == n-1 && y == m-1) {
				System.out.println(d);
				System.exit(0);
			}
			
			for(int i = 0; i < 4; i++) {
				int nx = x + dx[i];
				int ny = y + dy[i];
				
				if(nx < 0 || nx >= n || ny < 0 || ny >= m) continue;
				
				// 다음 칸이 빈 칸일 때
				if(map[nx][ny] == 0) {
					// 다음 칸이 빈 칸이므로 벽을 부순 횟수는 변하지 않음
					// 현재 벽 부순 횟수의 상태에서 (nx, ny)에 방문한 적이 없다면
					if(!visited[nx][ny][cnt]) {
						visited[nx][ny][cnt] = true;
						q.offer(new Node(nx, ny, cnt, d + 1));
					}
				} else { // 다음 칸이 벽일 때
					// 현재까지 벽을 부수지 않은 경우(cnt == 0)에만 이동 가능
					if(cnt == 0 && !visited[nx][ny][1]) {
						visited[nx][ny][1] = true;
						q.offer(new Node(nx, ny, 1, d + 1));
					}
				}
			}
		}
	}
	
	public static void main(String args[]) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		n = Integer.parseInt(st.nextToken());
		m = Integer.parseInt(st.nextToken());
		map = new int[n][m];
		visited = new boolean[n][m][2];
		
		for(int i = 0; i < n; i++) {
			String str = br.readLine();
			for(int j = 0; j < m; j++) {
				map[i][j] = str.charAt(j) - '0';
			}
		}
		
		bfs();
		System.out.println(-1);
	}
}

class Node {
	int x;
	int y;
	int cnt; // 현재 벽 부순 횟수
	int d; // 현재까지의 이동 거리
	
	Node(int x, int y, int cnt, int d) {
		this.x = x;
		this.y = y;
		this.cnt = cnt;
		this.d = d;
	}
}