import java.util.*;
import java.io.*;

public class Main {	
	// 상하 반전 연산
	public static int[][] oper1(int[][] a) {
		int n = a.length;
		int m = a[0].length;
		int[][] b = new int[n][m];
		
		for(int i = 0; i < n; i++) {
			for(int j = 0; j < m; j++) {
				b[i][j] = a[n-i-1][j];
			}
		}
		return b;
	}
	
	// 좌우 반전 연산
	public static int[][] oper2(int[][] a) {
		int n = a.length;
		int m = a[0].length;
		int[][] b = new int[n][m];
		
		for(int i = 0; i < n; i++) {
			for(int j = 0; j < m; j++) {
				b[i][j] = a[i][m-j-1];
			}
		}
		return b;
	}
	
	// 우로 90도 회전 연산
	public static int[][] oper3(int[][] a) {
		int n = a.length;
		int m = a[0].length;
		
		// 배열 회전 시 행과 열의 범위 변경됨
		int[][] b = new int[m][n];
		
		for(int i = 0; i < m; i++) {
			for(int j = 0; j < n; j++) {
				b[i][j] = a[n-j-1][i];
			}
		}
		return b;
	}
	
	// 좌로 90도 회전 연산
	public static int[][] oper4(int[][] a) {
		int n = a.length;
		int m = a[0].length;
		
		// 배열 회전 시 행과 열의 범위 변경됨
		int[][] b = new int[m][n];
		
		for(int i = 0; i < m; i++) {
			for(int j = 0; j < n; j++) {
				b[i][j] = a[j][m-i-1];
			}
		}
		return b;
	}
	
	// 5번 연산(각 그룹을 +1 그룹의 위치로)
	public static int[][] oper5(int[][] a) {
		int n = a.length;
		int m = a[0].length;
		int[][] b = new int[n][m];
		
		for(int i = 0; i < n/2; i++) {
			for(int j = 0; j < m/2; j++) {
				b[i][j+m/2] = a[i][j]; 		   // 배열a-1그룹 -> 배열b-2그룹으로
				b[i+n/2][j+m/2] = a[i][j+m/2]; // 배열a-2그룹 -> 배열b-3그룹으로
				b[i+n/2][j] = a[i+n/2][j+m/2]; // 배열a-3그룹 -> 배열b-4그룹
				b[i][j] = a[i+n/2][j]; 		   // 배열a-4그룹 -> 배열b-1그룹
			}
		}
		return b;
	}
	
	// 6번 연산(각 그룹을 -1 그룹의 위치로)
	public static int[][] oper6(int[][] a) {
		int n = a.length;
		int m = a[0].length;
		int[][] b = new int[n][m];
		
		for(int i = 0; i < n/2; i++) {
			for(int j = 0; j < m/2; j++) {
				b[i+n/2][j] = a[i][j]; 		   // 배열a-그룹1 -> 배열b-그룹4
				b[i+n/2][j+m/2] = a[i+n/2][j]; // 배열a-그룹4 -> 배열b-그룹3
				b[i][j+m/2] = a[i+n/2][j+m/2]; // 배열a-그룹3 -> 배열b-그룹2
				b[i][j] = a[i][j+m/2]; 		   // 배열a-그룹2 -> 배열b-그룹1
			}
		}
		return b;
	}
	
    public static void main(String args[]) throws IOException {
    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    	StringTokenizer st = new StringTokenizer(br.readLine()); 
    	
    	// 배열 회전 시 배열의 크기가 변하기 때문에 n, m을 전역 변수로 선언 x
    	int n = Integer.parseInt(st.nextToken());
    	int m = Integer.parseInt(st.nextToken());
    	int r = Integer.parseInt(st.nextToken());
    	int[][] arr = new int[n][m];
    	
    	for(int i = 0; i < n; i++) {
    		st = new StringTokenizer(br.readLine());
    		for(int j = 0; j < m; j++) {
    			arr[i][j] = Integer.parseInt(st.nextToken());
    		}
    	}
    	
    	st = new StringTokenizer(br.readLine());
    	while(r-- > 0) {
    		int i = Integer.parseInt(st.nextToken());
    		
    		if(i == 1) 
    			arr = oper1(arr);
    		else if(i == 2)
    			arr = oper2(arr);
    		else if(i == 3)
    			arr = oper3(arr);
    		else if(i == 4)
    			arr = oper4(arr);
    		else if(i == 5)
    			arr = oper5(arr);
    		else if(i == 6)
    			arr = oper6(arr);
    	}
    	
    	// 연산 결과 출력
    	StringBuilder sb = new StringBuilder();
    	// 배열 회전 시 배열의 행, 열의 범위가 변경되기 때문에 i,j의 범위는 n,m이 아닌 최종 배열의 크기
    	for(int i = 0; i < arr.length; i++) {
    		for(int j = 0; j < arr[i].length; j++) {
    			sb.append(arr[i][j] + " ");
    		}
    		sb.append("\n");
    	}
    	System.out.println(sb);
    }
}