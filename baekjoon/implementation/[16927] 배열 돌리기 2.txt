import java.io.*;
import java.util.*;

public class Main {
	// 현재 칸의 우,하,좌,상의 순서로 확인
	public static int[] dx = {0, 1, 0, -1}; 
	public static int[] dy = {1, 0, -1, 0};
	public static int[][] arr;

	public static void rotate(int start, int row_end, int col_end, int r) {
		while(r-- > 0) { // 회전
			int x = start, y = start;
			int start_value = arr[x][y]; // 지워질 시작 칸의 값 기록
			int idx = 0; // 확인할 칸의 방향 인덱스			

			// 칸 이동
			while(idx < 4) {
				int nx = x + dx[idx];
				int ny = y + dy[idx];

				if(nx >= start && nx <= row_end && ny >= start && ny <= col_end) {
					arr[x][y] = arr[nx][ny];
					x = nx;
					y = ny;
				}
				else idx++;
			}
			// 모든 칸 이동 후 시작 칸이 이동해야 할 칸의 값 변경
			arr[start+1][start] = start_value;
		}
	}

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		int n = Integer.parseInt(st.nextToken());
		int m = Integer.parseInt(st.nextToken());
		int r = Integer.parseInt(st.nextToken());
		arr = new int[n][m];

		for(int i = 0; i < n; i++) {
			st = new StringTokenizer(br.readLine());
			for(int j = 0; j < m; j++) {
				arr[i][j] = Integer.parseInt(st.nextToken());
			}
		}

		// 전체 그룹의 개수
		int group_cnt = Math.min(n, m) / 2;
		for(int i = 0; i < group_cnt; i++) {
			// 각 그룹별 행, 열 범위
			int row_end = n-i-1;
			int col_end = m-i-1;
			// 각 그룹별 칸의 개수
			int cnt = (row_end - i + 1) * 2 + (col_end - i + 1) * 2 - 4;
			// 'r % 칸의 개수' 만큼 회전
			rotate(i, row_end, col_end, r % cnt);
		}

		// 회전 후 배열 출력
		StringBuilder sb = new StringBuilder();
		for(int i = 0; i < n; i++) {
			for(int j = 0; j < m; j++) {
				sb.append(arr[i][j] + " ");
			}
			sb.append("\n");
		}
		System.out.println(sb);
	}
}