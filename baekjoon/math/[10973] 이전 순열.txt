import java.io.*;
import java.util.*;

public class Main {
	public static int n;
	public static int[] arr; // 순열
	
	public static boolean prev_permutation() {
		// arr[i-1]로 시작하는 첫 순열 찾기
		// arr[i-1] > arr[i]를 만족하는 가장 큰 i 찾기
		int i = n-1;
		while(i > 0 && arr[i-1] <= arr[i]) i -= 1;
		
		// 찾지 못했다면 현재 순열은 첫 순열(이전 순열 존재x)
		if(i <= 0) return false; 
		
		// j >= i이면서 arr[j] < arr[i-1]을 만족하는 가장 큰 j 찾기
		int j = n-1;
		while(arr[j] >= arr[i-1]) j -= 1;
		
		// arr[i-1]과 arr[j]를 교환
		int temp = arr[i-1];
		arr[i-1] = arr[j];
		arr[j] = temp;
		
		// arr[i]부터 순열 뒤집기
		j = n-1;
		while(i < j) {
			temp = arr[i];
			arr[i] = arr[j];
			arr[j] = temp;
			i += 1;
			j -= 1;
		}
		return true;
	}
	
    public static void main(String[] args) throws IOException {
    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    	n = Integer.parseInt(br.readLine());
    	StringTokenizer st = new StringTokenizer(br.readLine());
    	arr = new int[n];
    	
    	for(int i = 0; i < n; i++) {
    		arr[i] = Integer.parseInt(st.nextToken());
    	}
    	
    	StringBuilder sb = new StringBuilder();
    	// 이전 순열 출력
    	if(prev_permutation()) {
    		for(int i = 0; i < n; i++) {
    			sb.append(arr[i] + " ");
    		}
    		System.out.println(sb);
    	} else {
    		System.out.println(-1);
    	}
    }
}