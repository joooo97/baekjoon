import java.util.*;
import java.io.*;

public class Main {
	public static int[] arr; // 주어진 수열
	public static int[] d; // 증가하는 부분 수열의 길이
	public static int[] prev; // 증가하는 부분 수열에서 현재 수의 전 수의 인덱스
	public static StringBuilder sb = new StringBuilder();
	
	// 가장 긴 증가하는 부분 수열 출력
	public static void print(int idx) {
		if(idx == -1) return;
		
		print(prev[idx]);
		sb.append(arr[idx]).append(" ");
	}
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int n = Integer.parseInt(br.readLine());
		arr = new int[n];
		d = new int[n];
		prev = new int[n];

		StringTokenizer st = new StringTokenizer(br.readLine());
		for(int i = 0; i < n; i++) {
			arr[i] = Integer.parseInt(st.nextToken());
		}

		for(int i = 0; i < n; i++) {
			d[i] = 1; // 부분 수열의 길이를 1로 초기화
			prev[i] = -1; // 앞에 올 수가 없으므로 인덱스 -1로 초기화
			
			for(int j = 0; j < i; j++) {
				if(arr[j] < arr[i] && d[i] < d[j] + 1) {
					d[i] = d[j] + 1;
					prev[i] = j; // 앞에 올 수의 인덱스 기록
				}
			}
		}
		
		int length = d[0]; // 증가하는 부분 수열의 길이의 최대값
		int idx = 0; // 가장 긴 증가하는 부분 수열의 마지막 값의 인덱스
		for(int i = 1; i < n; i++) {
			if(length < d[i]) {
				length = d[i];
				idx = i;
			}
		}
		
		sb.append(length).append("\n");
		print(idx); // 수열 출력
		System.out.println(sb);
	}
}