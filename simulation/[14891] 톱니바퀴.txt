import java.io.*;
import java.util.*;

// 톱니의 극이 다름: 반대 방향으로 회전
// 톱니의 극이 같음: 회전 x
// 회전 x: 회전 x
public class Main {
	// 톱니) 시계방향 순, 0: N극, 1: S극
	public static int[][] arr = new int[4][8];

	public static int getScore() {
		int score = 0;
		for(int i = 0; i < 4; i++) {
			if(arr[i][0] == 1)
				score += Math.pow(2, i);
		}
		return score;
	}

	// no번째 톱니바퀴를 dir 방향으로 회전
	public static void rotate(int no, int dir) {		
		if(dir == 1) { // 시계 방향
			int tmp = arr[no][7];

			for(int i = 7; i > 0; i--) {
				arr[no][i] = arr[no][i-1];
			}
			// 마지막 톱니를 첫 번째 톱니로 이동
			arr[no][0] = tmp;
		} else { // 반시계 방향
			int tmp = arr[no][0];

			for(int i = 0; i < 7; i++) {
				arr[no][i] = arr[no][i+1];
			}

			// 첫 번째 톱니를 마지막 톱니로 이동
			arr[no][7] = tmp;
		}
	}

	// 회전할 톱니바퀴와 다른 톱니바퀴 비교
	public static void findDirection(int no, int dir) {
		int[] d = new int[4]; // 각 톱니바퀴들의 회전 방향
		d[no] = dir; // 현재 톱니바퀴의 방향 저장

		// 회전할 톱니바퀴의 왼쪽 톱니바퀴들의 각 회전 방향 구하기
		for(int i = no; i > 0; i--) {
			// 현재 톱니바퀴와 왼쪽 톱니바퀴 비교
			if(arr[i][6] != arr[i-1][2]) {
				d[i-1] = -d[i]; // 반대 방향 저장
			}
			else break;
			// 톱니의 극이 같은 경우 회전x
			// 한 번 회전하지 않으면 그 후로 회전x
		}

		// 회전할 톱니바퀴의 오른쪽 톱니바퀴들의 각 회전 방향 구하기
		for(int i = no; i <= 2; i++) {
			// 현재 톱니바퀴와 오른쪽 톱니바퀴 비교
			if(arr[i][2] != arr[i+1][6]) {
				d[i+1] = -d[i];
			}
			else break;
		}

		// 톱니바퀴 회전
		for(int i = 0; i < 4; i++) {
			if(d[i] != 0) rotate(i, d[i]);
		}		
	}

	public static void main(String args[]) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;

		// 톱니바퀴 정보
		for(int i = 0; i < 4; i++) {
			String line = br.readLine();
			for(int j = 0; j < 8; j++) {
				arr[i][j] = line.charAt(j) - '0';
			}
		}

		int k = Integer.parseInt(br.readLine());
		while(k-- > 0) {
			st = new StringTokenizer(br.readLine());
			int no = Integer.parseInt(st.nextToken()) - 1;
			int dir = Integer.parseInt(st.nextToken()); // 1: 시계, -1: 반시계			

			findDirection(no, dir); // 다른 톱니바퀴들과 비교
		}

		System.out.println(getScore());

	}
}