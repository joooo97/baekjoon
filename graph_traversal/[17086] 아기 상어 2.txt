import java.util.*;
import java.io.*;

public class Main {
	public static int n, m, ans;
	public static int[][] map;
	public static int[][] d; // bfs에서 사용할 거리 배열

	// 상하좌우, 대각선 방향
	public static int[] dx = {-1, 1, 0, 0, -1, -1, 1, 1};
	public static int[] dy = {0, 0, -1, 1, -1, 1, -1, 1};

	public static int bfs(int sx, int sy) {
		for(int i = 0; i < n; i++) {
			Arrays.fill(d[i], -1);
		}
		
		Queue<Node> q = new LinkedList<>();
		q.offer(new Node(sx, sy));
		d[sx][sy] = 0;
		
		while(!q.isEmpty()) {
			Node now = q.poll();
			int x = now.x;
			int y = now.y;
			
			// 가장 먼저 큐에서 꺼내진 아기 상어가 가장 가까운 아기 상어이므로 안전 거리 반환
			if(map[x][y] == 1)
				return d[x][y];
			
			for(int i = 0; i < 8; i++) {
				int nx = x + dx[i];
				int ny = y + dy[i];
				
				if(nx < 0 || nx >= n || ny < 0 || ny >= m) continue;
			
				if(d[nx][ny] == -1) {
					q.offer(new Node(nx, ny));
					d[nx][ny] = d[x][y] + 1;
				}
			}
		}
		
		return -1;
	}
	
	public static void main(String args[]) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		n = Integer.parseInt(st.nextToken());
		m = Integer.parseInt(st.nextToken());
		map = new int[n][m];
		d = new int[n][m];
		
		for(int i = 0; i < n; i++) {
			st = new StringTokenizer(br.readLine());
			for(int j = 0; j < m; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		
		for(int i = 0; i < n; i++) {
			for(int j = 0; j < m; j++) {
				// 각 칸의 안전 거리
				int safe_dist = bfs(i, j);
				// 안전 거리의 최대값 구하기
				if(ans < safe_dist) ans = safe_dist;
			}
		}
		System.out.println(ans);
	}
}

class Node {
	int x;
	int y;
	
	Node(int x, int y) {
		this.x = x;
		this.y = y;
	}
}