import java.util.*;
import java.io.*;

// 0: 이동 가능, 1: 벽
// 벽을 한 개까지 부술 수 있음
// 상하좌우 이동
// (n, m)까지의 최단 경로, 시작 칸과 끝 칸도 포함
public class Main {
	public static int n, m;
	public static int[][] map;
	// 정점에 도달했을 때 벽을 부순 적이 있는 경우와 부순 적이 없는 경우가 있음 
	// 3차원 배열로 표현 -> [x좌표][y좌표][벽 부순 횟수: 0/1]
	public static boolean[][][] visited;
	public static int[] dx = {-1, 1, 0, 0};
	public static int[] dy = {0, 0, -1, 1};

	public static void bfs() {
		Queue<Node> q = new LinkedList<>();
		// 시작 정점에 대해 처리
		q.offer(new Node(0, 0, 0, 1));
		visited[0][0][0] = true;
		
		while(!q.isEmpty()) {
			Node now = q.poll();
			int x = now.x;
			int y = now.y;
			int cnt = now.cnt;
			int dist = now.dist;
			
			// (n, m) 정점에 도달했다면 종료
			if(x == n-1 && y == m-1) {
				System.out.println(dist);
				System.exit(0);
			}
			
			for(int i = 0; i < 4; i++) {
				int nx = x + dx[i];
				int ny = y + dy[i];
				
				if(nx < 0 || nx >= n || ny < 0 || ny >= m) continue;
			
				// 다음 정점이 빈 칸이고, 방문하지 않았다면
				// 다음 정점이 빈 칸인 경우 벽 부수는 횟수는 변하지 않음
				if(map[nx][ny] == 0) {
					if(!visited[nx][ny][cnt]) {
						q.offer(new Node(nx, ny, cnt, dist + 1));
						visited[nx][ny][cnt] = true;
					}
				} else { // 다음 정점이 벽인 경우, 현재 벽을 부순 횟수가 0이어야만 이동 가능
					if(cnt == 0 && !visited[nx][ny][1]) {
						q.offer(new Node(nx, ny, 1, dist + 1));
						visited[nx][ny][1] = true;
					}
				}
			}
		}
	}

	public static void main(String args[]) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		n = Integer.parseInt(st.nextToken());
		m = Integer.parseInt(st.nextToken());
		map = new int[n][m];
		visited = new boolean[n][m][2];

		for(int i = 0; i < n; i++) {
			String line = br.readLine();
			for(int j = 0; j < m; j++) {
				map[i][j] = line.charAt(j) - '0';
			}
		}

		bfs();
		// 최단거리를 출력하지 못했다면 불가능한 경우인 것
		System.out.println(-1);
	}
}

class Node {
	int x;
	int y;
	int cnt; // 현재까지 벽을 부순 횟수
	int dist; // 현재까지의 이동 거리

	Node(int x, int y, int cnt, int dist) {
		this.x = x;
		this.y = y;
		this.cnt = cnt;
		this.dist = dist;
	}
}