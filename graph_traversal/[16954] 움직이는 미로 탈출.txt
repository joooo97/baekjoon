import java.util.*;
import java.io.*;

public class Main {
	public static char[][] map = new char[8][8];
	//0~8초후의 각 위치에 대한 방문 여부 확인 배열
	public static boolean[][][] visited = new boolean[8][8][9];
	// 이동 가능 위치: 상하좌우,대각선,이동x
	public static int[] dx = {-1, 1, 0, 0, -1, -1, 1, 1, 0};
	public static int[] dy = {0, 0, -1, 1, -1, 1, -1, 1, 0};
	
	public static int bfs() {
		Queue<Node> q = new LinkedList<>();
		// 시작 위치에 대해 처리
		q.offer(new Node(7, 0, 0)); // 현재: 0초 후 (7,0)에 위치
		visited[7][0][0] = true;
		
		while(!q.isEmpty()) {
			Node now = q.poll();
			int x = now.x;
			int y = now.y;
			int t = now.t;
			
			if(x == 0 && y == 7) return 1;
			
			for(int i = 0; i < 9; i++) {
				int nx = x + dx[i];
				int ny = y + dy[i];
				int nt = t+1 > 8 ? 8 : t+1;
				
				if(nx < 0 || nx >= 8 || ny < 0 || ny >= 8) continue;
				
				// t초 후 다음 이동위치에 벽이 있다면 이동 불가
				if(nx-t >= 0 && map[nx-t][ny] == '#') continue;
				// 다음 이동 위치로 이동 후 그 위치에 벽이 내려온다면 이동 불가
				// t+1초 후의 벽의 위치를 확인하면 되므로 nx-t-1행의 벽 존재 여부 확인
				if(nx-t-1 >= 0 && map[nx-t-1][ny] == '#') continue;
				
				if(!visited[nx][ny][nt]) {
					q.offer(new Node(nx, ny, nt));
					visited[nx][ny][nt] = true;
				}
			}
		}
		return 0;
	}
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		for(int i = 0; i < 8; i++) {
			String line = br.readLine();
			for(int j = 0; j < 8; j++) {
				map[i][j] = line.charAt(j);
			}
		}
		
		System.out.println(bfs());
	}
}

class Node {
	int x;
	int y;
	int t;
	
	Node(int x, int y, int t) {
		this.x = x;
		this.y = y;
		this.t = t;
	}
}