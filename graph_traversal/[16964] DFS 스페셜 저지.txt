import java.util.*;
import java.io.*;

public class Main {
	public static int n, idx = 1; // idx: 확인할 방문 순서의 인덱스
	public static ArrayList<ArrayList<Integer>> graph = new ArrayList<>();
	public static int[] order;
	public static boolean[] visited;

	public static void dfs(int x) {
		visited[x] = true;
		
		// 현재 방문 노드의 인접 노드를 담을 set
		HashSet<Integer> set = new HashSet<>();
		for(int next : graph.get(x)) {
			if(!visited[next]) set.add(next);
		}
		
		// 현재 확인할 순서의 노드가 다음으로 이동 가능한 인접 노드들에 포함되어 있는지 확인
		for(int i = 0; i < set.size(); i++) {
			int node = order[idx++];
			
			if(set.contains(node)) {
				dfs(node);
			} else { // 포함되어 있지 않다면 올바르지 않은 순서인 것
				System.out.println(0);
				System.exit(0);
			}
		}
		
	}

	public static void main(String args[]) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = null;

		n = Integer.parseInt(br.readLine());
		order = new int[n];
		visited = new boolean[n+1];

		for(int i = 0; i <= n; i++) {
			graph.add(new ArrayList<>());
		}

		// 간선 정보 입력
		for(int i = 0; i < n-1; i++) {
			st = new StringTokenizer(br.readLine());
			int a = Integer.parseInt(st.nextToken());
			int b = Integer.parseInt(st.nextToken());

			graph.get(a).add(b);
			graph.get(b).add(a);
		}

		// 주어진 DFS 방문 순서
		st = new StringTokenizer(br.readLine());
		for(int i = 0; i < n; i++) {
			order[i] = Integer.parseInt(st.nextToken());
		}

		// 주어진 방문 순서의 시작 정점이 1이 아니라면 올바르지 않은 순서이다.
		if(order[0] != 1) {
			System.out.println(0);
			System.exit(0);
		}

		dfs(1);
		System.out.println(1);		
	}
}