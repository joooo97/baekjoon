import java.util.*;
import java.io.*;

public class Main {
	public static int n, m, ans;
	public static int sx, sy, ex, ey; // 시작점, 끝점
	public static char[][] map;
	public static boolean[][] visited;
	public static int[] dx = {-1, 1, 0, 0};
	public static int[] dy = {0, 0, -1, 1};
	
	public static void bfs() {
		Queue<Node> q = new LinkedList<>();
		// 시작 정점에 대해 처리
		q.offer(new Node(sx, sy, -1));
		visited[sx][sy] = true;
		
		while(!q.isEmpty()) {
			Node now = q.poll();
			int x = now.x;
			int y = now.y;
			int cnt = now.cnt;
			
			if(x == ex && y == ey) {
				ans = cnt;
				return;
			}
			
			for(int i = 0; i < 4; i++) {
				int nx = x + dx[i];
				int ny = y + dy[i];

				// 네 방향에 대해 벽이 나오기 전까지 연속한 점들에 대해 처리
				while(nx >= 0 && nx < n && ny >= 0 && ny < m) {
					// 다음 칸이 벽인 경우 다음 방향 탐색
					if(map[nx][ny] == '*') break;
					
					if(!visited[nx][ny]) {
						q.offer(new Node(nx, ny, cnt+1));
						visited[nx][ny] = true;
					}
					
					// 같은 방향의 연속한 점들에 대해 계속 진행
					nx = nx + dx[i];
					ny = ny + dy[i];
				}
			}
		}
	}
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		m = Integer.parseInt(st.nextToken());
		n = Integer.parseInt(st.nextToken());
		map = new char[n][m];
		visited = new boolean[n][m];
		sx = sy = ex = ey = -1;
		
		for(int i = 0; i < n; i++) {
			String line = br.readLine();
			for(int j = 0; j < m; j++) {
				map[i][j] = line.charAt(j);
				
				if(map[i][j] == 'C') {
					if(sx == -1) {
						sx = i;
						sy = j;
					} else {
						ex = i;
						ey = j;
					}
				}
			}
		}
		
		bfs();
		System.out.println(ans);
	}
}

class Node {
	int x;
	int y;
	int cnt; // 거울의 개수
	
	Node(int x, int y, int cnt) {
		this.x = x;
		this.y = y;
		this.cnt = cnt;
	}
}