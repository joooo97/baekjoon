import java.util.*;
import java.io.*;

class Node {
	int x;
	int time;
	
	Node(int x, int time) {
		this.x = x;
		this.time = time;
	}
}

// 최소 비용 = 가중치 = 시간
// 가중치인 시간이 모두 1이므로 BFS를 이용하여 문제 풀이
public class Main {
	public static int n, k;
	public static boolean[] visited = new boolean[100001];
	
	public static void bfs() {
		Queue<Node> q = new LinkedList<>();
		q.offer(new Node(n, 0));
		
		while(!q.isEmpty()) {
			Node now = q.poll();
			int x = now.x;
			int t = now.time;
			
			// 동생을 찾은 경우
			if(x == k) {
				System.out.println(t);
				System.exit(0);
			}
			
			// x + 1로 이동
			if(x + 1 <= 100000 && !visited[x + 1]) {
				q.offer(new Node(x + 1, t + 1));
				visited[x + 1] = true;
			}
			
			// x - 1로 이동
			if(x - 1 >= 0 && !visited[x - 1]) {
				q.offer(new Node(x - 1, t + 1));
				visited[x - 1] = true;
			}
			
			// 2 * x로 이동
			if(2 * x <= 100000 && !visited[2 * x]) {
				q.offer(new Node(2 * x, t + 1));
				visited[2 * x] = true;
			}
		}
	}
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		n = Integer.parseInt(st.nextToken());
		k = Integer.parseInt(st.nextToken());
		
		bfs();
	}
	
}