import java.util.*;
import java.io.*;

public class Main {
	public static int start, end;
	public static int[] dist = new int[10000];
	public static boolean[] prime = new boolean[10000];
	
	// 네자리 수까지의 모든 소수 구하기
	public static void findPrimeNumbers() {
		prime[0] = prime[1] = true; // 0과 1은 소수가 아님(true: 소수가 아니므로 지움)
		
		for(int i = 2; i < 10000; i++) {
			if(!prime[i]) { // i가 소수라면
				// 소수 i의 배수들을 지움
				for(int j = i * 2; j < 10000; j += i) {
					prime[j] = true;
				}
			}
		}
		
		// 현재 prime 배열의 값이 false이면 소수
		// prime 배열의 값이 true인 경우 소수를, false인 경우 소수가 아님을 의미하도록 변경
		for(int i = 0; i < 10000; i++) {
			prime[i] = !prime[i];
		}
	}
	
	// num의 idx번째 자리를 digit으로 변경
	public static int changeNum(int num, int idx, int digit) {
		// 0으로 시작하는 수로는 변경 불가능
		if(idx == 0 && digit == 0) return -1;

		// 각 자리의 숫자 구하기
		int a = num / 1000;
		int b = (num % 1000) / 100;
		int c = (num % 100) / 10;
		int d = num % 10;
		
		if(idx == 0) a = digit;
		else if(idx == 1) b = digit;
		else if(idx == 2) c = digit;
		else d = digit;
		
		// 변경된 숫자 구하기
		int changedNum = 0;
		changedNum += (a * 1000);
		changedNum += (b * 100);
		changedNum += (c * 10);
		changedNum += d;
		
		return changedNum;
	}
	
	public static void bfs() {
		Queue<Integer> q = new LinkedList<>();
		q.offer(start);
		dist[start] = 0;
		
		while(!q.isEmpty()) {
			int now = q.poll();
			
			for(int i = 0; i < 4; i++) {
				for(int j = 0; j <= 9; j++) {
					int next = changeNum(now, i, j);
					
					// 변경 가능하다면 그 수가 소수인지, 방문하지 않은 수인지 확인
					if(next != -1) {
						if(prime[next] && dist[next] == -1) {
							q.offer(next);
							dist[next] = dist[now] + 1;
						}
						
					}
				}
			}
		}
	}

	public static void main(String args[]) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = null;
		findPrimeNumbers(); // 소수 구하기
		
		int t = Integer.parseInt(br.readLine());
		
		while(t-- > 0) {
			st = new StringTokenizer(br.readLine());
			start = Integer.parseInt(st.nextToken());
			end = Integer.parseInt(st.nextToken());
			// bfs 진행 전 거리배열(방문 여부확인) 초기화
			Arrays.fill(dist, -1);
			
			bfs();
			
			System.out.println(dist[end] == -1 ? "Impossible" : dist[end]);
		}
	}
}
