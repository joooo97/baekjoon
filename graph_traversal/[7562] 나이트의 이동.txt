import java.util.*;

class Node {
	int x;
	int y;
	
	Node(int x, int y) {
		this.x = x;
		this.y = y;
	}
}

public class Main {
	public static int[] dx = {-1, -2, -2, -1, 1, 2, 2, 1};
	public static int[] dy = {-2, -1, 1, 2, -2, -1, 1, 2};
		
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int t = sc.nextInt();
		while(t-- > 0) {
			int n = sc.nextInt();
			int[][] dist = new int[n][n];
			for(int i = 0; i < n; i++) {
				Arrays.fill(dist[i], -1);
			}
			
			int cx = sc.nextInt(); // 현재 칸
			int cy = sc.nextInt();
			int mx = sc.nextInt(); // 이동하려는 칸
			int my = sc.nextInt();
			
			// bfs 진행
			Queue<Node> q = new LinkedList<>();
			q.offer(new Node(cx, cy));
			dist[cx][cy] = 0; // 방문 처리
			
			while(!q.isEmpty()) {
				Node now = q.poll();
				int x = now.x;
				int y = now.y;
				
				for(int i = 0; i < 8; i++) {
					int nx = x + dx[i];
					int ny = y + dy[i];
					
					if(nx < 0 || nx >= n || ny < 0 || ny >= n) continue;
					
					if(dist[nx][ny] == -1) {
						dist[nx][ny] = dist[x][y] + 1;
						q.offer(new Node(nx, ny));
					}
				}
			}
			System.out.println(dist[mx][my]);
		}
	}

}