import java.util.*;
import java.io.*;

// 하루가 지나면 익은 토마토와 인접한 익지 않은 토마토는 익음
// 며칠 후 모든 토마토가 다 익게되는지
// 1: 익음, 0: 익지 않음, -1: 없음

class Tomato {
	int x;
	int y;
	
	Tomato(int x, int y) {
		this.x = x;
		this.y = y;
	}
}

public class Main {
	public static int m, n, ans = 0;
	public static int[][] box;
	public static int[][] d;
	public static int[] dx = {-1, 1, 0, 0};
	public static int[] dy = {0, 0, -1, 1};
	public static Queue<Tomato> q = new LinkedList<>();
	
	public static void bfs() {
		while(!q.isEmpty()) {
			Tomato t = q.poll();
			int x = t.x;
			int y = t.y;
			ans = d[x][y];
			
			for(int i = 0; i < 4; i++) {
				int nx = x + dx[i];
				int ny = y + dy[i];
				  
				if(nx < 0 || nx >= n || ny < 0 || ny >= m) continue;
				
				// 익지 않았고 방문하지 않았다면
				if(box[nx][ny] == 0 && d[nx][ny] == 0) {
					q.offer(new Tomato(nx, ny));
					d[nx][ny] = d[x][y] + 1; 
				}
			}
		}
	}
 
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		m = Integer.parseInt(st.nextToken());
		n = Integer.parseInt(st.nextToken());
		box = new int[n][m];
		d = new int[n][m];
						
		// 처음부터 모두 익은 상태인지 검사
		// - 토마토는 최소 1개가 주어지기 때문에 익지 않은 토마토가 있는 경우 false로 체크
		// -> 입력 종료 후 check가 그대로 true라면 처음부터 모두 익은 상태
		// -> 입력 종료 후 check가 false라면 익지 않은 토마토가 존재
		boolean check = true;
		for(int i = 0; i < n; i++) {
			st = new StringTokenizer(br.readLine());
			for(int j = 0; j < m; j++) {
				box[i][j] = Integer.parseInt(st.nextToken());
				// 익지 않은 토마토가 있는지 확인
				if(box[i][j] == 0) check = false;
				// 익은 토마토는 큐에 담아주기
				// - 하루가 지날 때마다 토마토가 동시에 익기 때문에 익은 토마토의 위치를 먼저 큐에 담아줘야 함
				if(box[i][j] == 1) q.offer(new Tomato(i, j));
			}
		}
		
		// 처음부터 모두 익은 상태
		if(check) {
			System.out.println(0);
			System.exit(0);
		}
		
		bfs();
		
		// 탐색 종료 후 익지 않은 토마토가 하나라도 존재하는지 확인
		for(int i = 0; i < n; i++) {
			for(int j = 0; j < m; j++) {
				// 익지 않은 토마토이고, 일 수가 기록되지 않았다면
				if(box[i][j] == 0 && d[i][j] == 0) ans = -1;
			}
		}
		
		System.out.println(ans);
	}
	
}