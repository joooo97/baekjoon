import java.util.*;
import java.io.*;

// 같은 색의 점들로 이루어진 크기가 4 이상인 사이클의 존재 여부 출력
public class Main {
	public static int n, m;
	public static char[][] board;
	public static boolean[][] check;

	public static int[] dx = {-1, 1, 0, 0};
	public static int[] dy = {0, 0, -1, 1};

	public static boolean dfs(int x, int y, int px, int py) {
		if(check[x][y]) return true;

		check[x][y] = true;

		for(int i = 0; i < 4; i++) {
			int nx = x + dx[i];
			int ny = y + dy[i];

			// 범위 벗어나면 무시
			if(nx < 0 || nx >= n || ny < 0 || ny >= m) continue;
			// 색이 다르면 무시
			if(board[x][y] != board[nx][ny]) continue;

			if(nx == px && ny == py) continue; // 이 경우 사이클의 크기가 2

			if(dfs(nx, ny, x, y)) return true;

		}
		return false;
	}

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		n = Integer.parseInt(st.nextToken());
		m = Integer.parseInt(st.nextToken());
		board = new char[n][m];
		check = new boolean[n][m];

		// 입력 방법2
		for(int i = 0; i < n; i++) {
			String line = br.readLine();
			for(int j = 0; j < m; j++) {
				board[i][j] = line.charAt(j);
			}
		}

		// 모든 칸에 대해 dfs 진행
		for(int i = 0; i < n; i++) {
			for(int j = 0; j < m; j++) {
				if(check[i][j]) continue;

				boolean ok = dfs(i, j, -1, -1);
				if(ok) {
					System.out.println("Yes");
					System.exit(0);
				}
			}
		}
		System.out.println("No");
	}
}