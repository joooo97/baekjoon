import java.util.*;
import java.io.*;

public class Main {
	public static ArrayList<ArrayList<Integer>> graph;
	public static int[] group; // 0: 방문 x, 1: 집합 1, 2: 집합 2
	public static boolean check; // 이분그래프인지 확인

	public static void dfs(int x, int group_x) {
		group[x] = group_x; // 집합 지정

		for(int i = 0; i < graph.get(x).size(); i++) {
			int y = graph.get(x).get(i);

			if(group[y] == 0) dfs(y, 3 - group_x);
			else if(group[y] == group[x]) check = false;
		}
	}

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int k = Integer.parseInt(br.readLine());

		while(k-- > 0) {
			String[] line = br.readLine().split(" ");
			int v = Integer.parseInt(line[0]);
			int e = Integer.parseInt(line[1]);
			check = true;
			group = new int[v+1];

			// 그래프 초기화
			graph = new ArrayList<ArrayList<Integer>>();
			for(int i = 0; i <= v; i++) {
				graph.add(new ArrayList<Integer>());
			}

			// 간선 연결
			for(int i = 0; i < e; i++) {
				String[] line2 = br.readLine().split(" ");
				int a = Integer.parseInt(line2[0]);
				int b = Integer.parseInt(line2[1]);
				graph.get(a).add(b);
				graph.get(b).add(a);
			}

			// 이분 그래프 확인
			for(int i = 1; i <= v; i++) {
				// 방문하지 않았다면 집합 1로 지정한 후 탐색
				if(group[i] == 0) dfs(i, 1);
			}

			if(!check) System.out.println("NO");
			else System.out.println("YES");
		}
	}
}