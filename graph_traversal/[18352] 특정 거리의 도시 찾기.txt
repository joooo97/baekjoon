import java.io.*;
import java.util.*;

public class Main {
	public static int n, m, k, x;
	public static int[] dist;
	public static ArrayList<ArrayList<Integer>> graph = new ArrayList<>();
	public static ArrayList<Integer> list = new ArrayList<>();
	
	public static void bfs(int x) {
		Queue<Integer> q = new LinkedList<>();
		q.offer(x);
		dist[x] = 0;
		
		while(!q.isEmpty()) {
			int now = q.poll();
			
			for(int i = 0; i < graph.get(now).size(); i++) {
				int next = graph.get(now).get(i);
				
				if(dist[next] == -1) {
					q.offer(next); // 방문
					dist[next] = dist[now] + 1; // 최단 거리 기록
				}
			}
		}
	}
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		n = Integer.parseInt(st.nextToken());
		m = Integer.parseInt(st.nextToken());
		k = Integer.parseInt(st.nextToken());
		x = Integer.parseInt(st.nextToken());
		dist = new int[n + 1];
		
		// 그래프, 최단 거리 배열 초기화
		for(int i = 0; i <= n; i++) {
			graph.add(new ArrayList<Integer>());
			dist[i] = -1;
		}
		
		// 간선 연결
		for(int i = 0; i < m; i++) {
			st = new StringTokenizer(br.readLine());
			int a = Integer.parseInt(st.nextToken());
			int b = Integer.parseInt(st.nextToken());
			graph.get(a).add(b);
		}
		
		bfs(x);

		// 최단 거리가 k인 도시 찾기
		for(int i = 1; i <= n; i++) {
			if(dist[i] == k) list.add(i);
		}

		if(list.size() == 0) {
			System.out.println(-1);
		} else {
			Collections.sort(list);
			StringBuilder sb = new StringBuilder();
			
			for(int i : list) {
				sb.append(i).append("\n");
			}
			System.out.println(sb);
		}
		
	}

}