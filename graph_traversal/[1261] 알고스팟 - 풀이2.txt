import java.util.*;

class Node implements Comparable<Node> {
	int x; // x좌표
	int y; // y좌표
	int cnt; // 벽을 부순 횟수
	
	Node(int x, int y, int cnt) {
		this.x = x;
		this.y = y;
		this.cnt = cnt;
	}
	
	@Override
	public int compareTo(Node other) {
		// 벽을 부순 횟수에 대해 오름차순 정렬
		return this.cnt - other.cnt;
	}
	
}

public class Main {
	public static int m, n;
	public static int[][] map;
	public static boolean[][] visited; 
	public static int[] dx = {-1, 1, 0, 0};
	public static int[] dy = {0, 0, -1, 1};
	
	public static void bfs() {
		// 정렬된 순서대로 큐에서 나옴
		PriorityQueue<Node> pq = new PriorityQueue<>();
		pq.offer(new Node(0, 0, 0));
		visited[0][0] = true;
		
		while(!pq.isEmpty()) {
			Node now = pq.poll();
			
			if(now.x == n-1 && now.y == m-1) {
				System.out.println(now.cnt);
				return;
			}
			
			for(int i = 0; i < 4; i++) {
				int nx = now.x + dx[i];
				int ny = now.y + dy[i];
				
				if(nx < 0 || nx >= n || ny < 0 || ny >= m) continue;
				
				if(!visited[nx][ny]) {
					if(map[nx][ny] == 0) 
						pq.offer(new Node(nx, ny, now.cnt));
					else 
						pq.offer(new Node(nx, ny, now.cnt + 1));
					
					visited[nx][ny] = true;
				}
			}
		}
	}
 
    public static void main(String[] args) {
    	Scanner sc = new Scanner(System.in);
    	m = sc.nextInt();
    	n = sc.nextInt();
    	map = new int[n][m];
    	visited = new boolean[n][m];
    	
    	for(int i = 0; i < n; i++) {
    		String line = sc.next();
    		for(int j = 0; j < m; j++) {
    			map[i][j] = line.charAt(j) - '0';
    		}
    	}
    	    	
    	bfs();
    }

}