import java.io.*;
import java.util.*;

public class Main {
	// 시작 칸에서 ↓ → ↑ ← 순서로 이동 시 다음 이동 값이 지워지므로 ← ↑ → ↓ 순서로 이동
	// 방향 인덱스에 따라 우,하,좌,상의 순서로 칸 확인
	public static int[] dx = {0, 1, 0, -1};
	public static int[] dy = {1, 0, -1, 0};
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		int n = Integer.parseInt(st.nextToken());
		int m = Integer.parseInt(st.nextToken());
		int r = Integer.parseInt(st.nextToken());
		int[][] arr = new int[n][m];
		
		for(int i = 0; i < n; i++) {
			st = new StringTokenizer(br.readLine());
			for(int j = 0; j < m; j++) {
				arr[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		
        	// 전체 그룹의 개수
        	// - 배열의 행,열의 길이 중 최소값을 반으로 나눈 만큼 만들어짐
		int group_n = Math.min(n, m) / 2;
				
		// 1. r번의 회전 진행
		while(r-- > 0) {
			// 2. 각 그룹별로 이동 진행
			for(int g = 0; g < group_n; g++) {
				// 시작 칸 구하기
				// - 0그룹 시작 칸: (0, 0) / 1그룹 시작 칸: (1, 1) ...
				int x = g;
				int y = g;
				
				// 그룹별 이동 시 시작 칸의 값은 지워지므로 시작 칸의 값 기록
				int start_value = arr[g][g];
				
				// 3. 4방향(← ↑ → ↓)으로 이동 진행
				int d_idx = 0; // 확인할 다음 칸의 방향 인덱스
				while(d_idx < 4) {
					// (nx, ny): 이동할 다음 칸의 좌표
					int nx = x + dx[d_idx];
					int ny = y + dy[d_idx];
					
					// 현재 그룹의 범위: g <= x < n-g, g <= y < m-g
					// 다음 칸(nx, ny)이 각 그룹의 범위를 벗어나지 않는 다면 현재 칸(x, y)으로 이동
					if(nx >= g && nx < n-g && ny >= g && ny < m-g) {
						arr[x][y] = arr[nx][ny]; // 이동
						x = nx;
						y = ny;
					} else { // 다음 칸이 각 그룹의 범위를 벗어나는 순간 방향 인덱스 변경
						d_idx++;
					}
				}
				
				// 4. 모든 이동 후  시작 칸이 이동해야 할 칸에 기록해 둔 시작 칸의 값을 넣어주기
				arr[g+1][g] = start_value;
			}
		} // while(r-- > 0)
		
		// 모든 회전 후 결과 출력
		StringBuilder sb = new StringBuilder();
		for(int i = 0; i < n; i++) {
			for(int j = 0; j < m; j++) {
				sb.append(arr[i][j]).append(" ");
			}
			sb.append("\n");
		}
		System.out.println(sb);
	}
}